// Code generated by MockGen. DO NOT EDIT.
// Source: ./proto/infra.pb.go

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/ipdk-io/k8s-infra-offload/proto"
	grpc "google.golang.org/grpc"
)

// MockInfraAgentClient is a mock of InfraAgentClient interface.
type MockInfraAgentClient struct {
	ctrl     *gomock.Controller
	recorder *MockInfraAgentClientMockRecorder
}

// MockInfraAgentClientMockRecorder is the mock recorder for MockInfraAgentClient.
type MockInfraAgentClientMockRecorder struct {
	mock *MockInfraAgentClient
}

// NewMockInfraAgentClient creates a new mock instance.
func NewMockInfraAgentClient(ctrl *gomock.Controller) *MockInfraAgentClient {
	mock := &MockInfraAgentClient{ctrl: ctrl}
	mock.recorder = &MockInfraAgentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfraAgentClient) EXPECT() *MockInfraAgentClientMockRecorder {
	return m.recorder
}

// ActivePolicyRemove mocks base method.
func (m *MockInfraAgentClient) ActivePolicyRemove(ctx context.Context, in *proto.ActivePolicyRemove, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActivePolicyRemove", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivePolicyRemove indicates an expected call of ActivePolicyRemove.
func (mr *MockInfraAgentClientMockRecorder) ActivePolicyRemove(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivePolicyRemove", reflect.TypeOf((*MockInfraAgentClient)(nil).ActivePolicyRemove), varargs...)
}

// ActivePolicyUpdate mocks base method.
func (m *MockInfraAgentClient) ActivePolicyUpdate(ctx context.Context, in *proto.ActivePolicyUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActivePolicyUpdate", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivePolicyUpdate indicates an expected call of ActivePolicyUpdate.
func (mr *MockInfraAgentClientMockRecorder) ActivePolicyUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivePolicyUpdate", reflect.TypeOf((*MockInfraAgentClient)(nil).ActivePolicyUpdate), varargs...)
}

// AddDelSnatPrefix mocks base method.
func (m *MockInfraAgentClient) AddDelSnatPrefix(ctx context.Context, in *proto.AddDelSnatPrefixRequest, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddDelSnatPrefix", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDelSnatPrefix indicates an expected call of AddDelSnatPrefix.
func (mr *MockInfraAgentClientMockRecorder) AddDelSnatPrefix(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDelSnatPrefix", reflect.TypeOf((*MockInfraAgentClient)(nil).AddDelSnatPrefix), varargs...)
}

// CreateNetwork mocks base method.
func (m *MockInfraAgentClient) CreateNetwork(ctx context.Context, in *proto.CreateNetworkRequest, opts ...grpc.CallOption) (*proto.AddReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNetwork", varargs...)
	ret0, _ := ret[0].(*proto.AddReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockInfraAgentClientMockRecorder) CreateNetwork(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockInfraAgentClient)(nil).CreateNetwork), varargs...)
}

// DeleteNetwork mocks base method.
func (m *MockInfraAgentClient) DeleteNetwork(ctx context.Context, in *proto.DeleteNetworkRequest, opts ...grpc.CallOption) (*proto.DelReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNetwork", varargs...)
	ret0, _ := ret[0].(*proto.DelReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNetwork indicates an expected call of DeleteNetwork.
func (mr *MockInfraAgentClientMockRecorder) DeleteNetwork(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockInfraAgentClient)(nil).DeleteNetwork), varargs...)
}

// InSync mocks base method.
func (m *MockInfraAgentClient) InSync(ctx context.Context, in *proto.Sync, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InSync", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InSync indicates an expected call of InSync.
func (mr *MockInfraAgentClientMockRecorder) InSync(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InSync", reflect.TypeOf((*MockInfraAgentClient)(nil).InSync), varargs...)
}

// IpamPoolRemove mocks base method.
func (m *MockInfraAgentClient) IpamPoolRemove(ctx context.Context, in *proto.IPAMPoolRemove, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IpamPoolRemove", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpamPoolRemove indicates an expected call of IpamPoolRemove.
func (mr *MockInfraAgentClientMockRecorder) IpamPoolRemove(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IpamPoolRemove", reflect.TypeOf((*MockInfraAgentClient)(nil).IpamPoolRemove), varargs...)
}

// IpamPoolUpdate mocks base method.
func (m *MockInfraAgentClient) IpamPoolUpdate(ctx context.Context, in *proto.IPAMPoolUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IpamPoolUpdate", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpamPoolUpdate indicates an expected call of IpamPoolUpdate.
func (mr *MockInfraAgentClientMockRecorder) IpamPoolUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IpamPoolUpdate", reflect.TypeOf((*MockInfraAgentClient)(nil).IpamPoolUpdate), varargs...)
}

// NatTranslationAdd mocks base method.
func (m *MockInfraAgentClient) NatTranslationAdd(ctx context.Context, in *proto.NatTranslation, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NatTranslationAdd", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatTranslationAdd indicates an expected call of NatTranslationAdd.
func (mr *MockInfraAgentClientMockRecorder) NatTranslationAdd(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NatTranslationAdd", reflect.TypeOf((*MockInfraAgentClient)(nil).NatTranslationAdd), varargs...)
}

// NatTranslationDelete mocks base method.
func (m *MockInfraAgentClient) NatTranslationDelete(ctx context.Context, in *proto.NatTranslation, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NatTranslationDelete", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatTranslationDelete indicates an expected call of NatTranslationDelete.
func (mr *MockInfraAgentClientMockRecorder) NatTranslationDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NatTranslationDelete", reflect.TypeOf((*MockInfraAgentClient)(nil).NatTranslationDelete), varargs...)
}

// RemoveActiveProfile mocks base method.
func (m *MockInfraAgentClient) RemoveActiveProfile(ctx context.Context, in *proto.ActiveProfileRemove, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveActiveProfile", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveActiveProfile indicates an expected call of RemoveActiveProfile.
func (mr *MockInfraAgentClientMockRecorder) RemoveActiveProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveActiveProfile", reflect.TypeOf((*MockInfraAgentClient)(nil).RemoveActiveProfile), varargs...)
}

// RemoveHostEndpoint mocks base method.
func (m *MockInfraAgentClient) RemoveHostEndpoint(ctx context.Context, in *proto.HostEndpointRemove, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveHostEndpoint", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveHostEndpoint indicates an expected call of RemoveHostEndpoint.
func (mr *MockInfraAgentClientMockRecorder) RemoveHostEndpoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHostEndpoint", reflect.TypeOf((*MockInfraAgentClient)(nil).RemoveHostEndpoint), varargs...)
}

// RemoveHostMetaData mocks base method.
func (m *MockInfraAgentClient) RemoveHostMetaData(ctx context.Context, in *proto.HostMetadataRemove, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveHostMetaData", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveHostMetaData indicates an expected call of RemoveHostMetaData.
func (mr *MockInfraAgentClientMockRecorder) RemoveHostMetaData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHostMetaData", reflect.TypeOf((*MockInfraAgentClient)(nil).RemoveHostMetaData), varargs...)
}

// RemoveIPSet mocks base method.
func (m *MockInfraAgentClient) RemoveIPSet(ctx context.Context, in *proto.IPSetRemove, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveIPSet", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveIPSet indicates an expected call of RemoveIPSet.
func (mr *MockInfraAgentClientMockRecorder) RemoveIPSet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveIPSet", reflect.TypeOf((*MockInfraAgentClient)(nil).RemoveIPSet), varargs...)
}

// RemoveLocalEndpoint mocks base method.
func (m *MockInfraAgentClient) RemoveLocalEndpoint(ctx context.Context, in *proto.WorkloadEndpointRemove, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveLocalEndpoint", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLocalEndpoint indicates an expected call of RemoveLocalEndpoint.
func (mr *MockInfraAgentClientMockRecorder) RemoveLocalEndpoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLocalEndpoint", reflect.TypeOf((*MockInfraAgentClient)(nil).RemoveLocalEndpoint), varargs...)
}

// RemoveNamespace mocks base method.
func (m *MockInfraAgentClient) RemoveNamespace(ctx context.Context, in *proto.NamespaceRemove, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveNamespace", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveNamespace indicates an expected call of RemoveNamespace.
func (mr *MockInfraAgentClientMockRecorder) RemoveNamespace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNamespace", reflect.TypeOf((*MockInfraAgentClient)(nil).RemoveNamespace), varargs...)
}

// RemoveRoute mocks base method.
func (m *MockInfraAgentClient) RemoveRoute(ctx context.Context, in *proto.RouteRemove, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveRoute", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRoute indicates an expected call of RemoveRoute.
func (mr *MockInfraAgentClientMockRecorder) RemoveRoute(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoute", reflect.TypeOf((*MockInfraAgentClient)(nil).RemoveRoute), varargs...)
}

// RemoveServiceAccount mocks base method.
func (m *MockInfraAgentClient) RemoveServiceAccount(ctx context.Context, in *proto.ServiceAccountRemove, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveServiceAccount", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveServiceAccount indicates an expected call of RemoveServiceAccount.
func (mr *MockInfraAgentClientMockRecorder) RemoveServiceAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveServiceAccount", reflect.TypeOf((*MockInfraAgentClient)(nil).RemoveServiceAccount), varargs...)
}

// RemoveVXLANTunnelEndpoint mocks base method.
func (m *MockInfraAgentClient) RemoveVXLANTunnelEndpoint(ctx context.Context, in *proto.VXLANTunnelEndpointRemove, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveVXLANTunnelEndpoint", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveVXLANTunnelEndpoint indicates an expected call of RemoveVXLANTunnelEndpoint.
func (mr *MockInfraAgentClientMockRecorder) RemoveVXLANTunnelEndpoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVXLANTunnelEndpoint", reflect.TypeOf((*MockInfraAgentClient)(nil).RemoveVXLANTunnelEndpoint), varargs...)
}

// RemoveWireguardEndpoint mocks base method.
func (m *MockInfraAgentClient) RemoveWireguardEndpoint(ctx context.Context, in *proto.WireguardEndpointRemove, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveWireguardEndpoint", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveWireguardEndpoint indicates an expected call of RemoveWireguardEndpoint.
func (mr *MockInfraAgentClientMockRecorder) RemoveWireguardEndpoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWireguardEndpoint", reflect.TypeOf((*MockInfraAgentClient)(nil).RemoveWireguardEndpoint), varargs...)
}

// SetSnatAddress mocks base method.
func (m *MockInfraAgentClient) SetSnatAddress(ctx context.Context, in *proto.SetSnatAddressRequest, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetSnatAddress", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSnatAddress indicates an expected call of SetSnatAddress.
func (mr *MockInfraAgentClientMockRecorder) SetSnatAddress(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSnatAddress", reflect.TypeOf((*MockInfraAgentClient)(nil).SetSnatAddress), varargs...)
}

// SetupHostInterface mocks base method.
func (m *MockInfraAgentClient) SetupHostInterface(ctx context.Context, in *proto.SetupHostInterfaceRequest, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetupHostInterface", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupHostInterface indicates an expected call of SetupHostInterface.
func (mr *MockInfraAgentClientMockRecorder) SetupHostInterface(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupHostInterface", reflect.TypeOf((*MockInfraAgentClient)(nil).SetupHostInterface), varargs...)
}

// UpdateActiveProfile mocks base method.
func (m *MockInfraAgentClient) UpdateActiveProfile(ctx context.Context, in *proto.ActiveProfileUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateActiveProfile", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActiveProfile indicates an expected call of UpdateActiveProfile.
func (mr *MockInfraAgentClientMockRecorder) UpdateActiveProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActiveProfile", reflect.TypeOf((*MockInfraAgentClient)(nil).UpdateActiveProfile), varargs...)
}

// UpdateGlobalBGPConfig mocks base method.
func (m *MockInfraAgentClient) UpdateGlobalBGPConfig(ctx context.Context, in *proto.GlobalBGPConfigUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGlobalBGPConfig", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlobalBGPConfig indicates an expected call of UpdateGlobalBGPConfig.
func (mr *MockInfraAgentClientMockRecorder) UpdateGlobalBGPConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalBGPConfig", reflect.TypeOf((*MockInfraAgentClient)(nil).UpdateGlobalBGPConfig), varargs...)
}

// UpdateHostEndpoint mocks base method.
func (m *MockInfraAgentClient) UpdateHostEndpoint(ctx context.Context, in *proto.HostEndpointUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateHostEndpoint", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostEndpoint indicates an expected call of UpdateHostEndpoint.
func (mr *MockInfraAgentClientMockRecorder) UpdateHostEndpoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostEndpoint", reflect.TypeOf((*MockInfraAgentClient)(nil).UpdateHostEndpoint), varargs...)
}

// UpdateHostMetaData mocks base method.
func (m *MockInfraAgentClient) UpdateHostMetaData(ctx context.Context, in *proto.HostMetadataUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateHostMetaData", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostMetaData indicates an expected call of UpdateHostMetaData.
func (mr *MockInfraAgentClientMockRecorder) UpdateHostMetaData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostMetaData", reflect.TypeOf((*MockInfraAgentClient)(nil).UpdateHostMetaData), varargs...)
}

// UpdateIPSet mocks base method.
func (m *MockInfraAgentClient) UpdateIPSet(ctx context.Context, in *proto.IPSetUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIPSet", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIPSet indicates an expected call of UpdateIPSet.
func (mr *MockInfraAgentClientMockRecorder) UpdateIPSet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIPSet", reflect.TypeOf((*MockInfraAgentClient)(nil).UpdateIPSet), varargs...)
}

// UpdateIPSetDelta mocks base method.
func (m *MockInfraAgentClient) UpdateIPSetDelta(ctx context.Context, in *proto.IPSetDeltaUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIPSetDelta", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIPSetDelta indicates an expected call of UpdateIPSetDelta.
func (mr *MockInfraAgentClientMockRecorder) UpdateIPSetDelta(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIPSetDelta", reflect.TypeOf((*MockInfraAgentClient)(nil).UpdateIPSetDelta), varargs...)
}

// UpdateLocalEndpoint mocks base method.
func (m *MockInfraAgentClient) UpdateLocalEndpoint(ctx context.Context, in *proto.WorkloadEndpointUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLocalEndpoint", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLocalEndpoint indicates an expected call of UpdateLocalEndpoint.
func (mr *MockInfraAgentClientMockRecorder) UpdateLocalEndpoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocalEndpoint", reflect.TypeOf((*MockInfraAgentClient)(nil).UpdateLocalEndpoint), varargs...)
}

// UpdateNamespace mocks base method.
func (m *MockInfraAgentClient) UpdateNamespace(ctx context.Context, in *proto.NamespaceUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNamespace", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNamespace indicates an expected call of UpdateNamespace.
func (mr *MockInfraAgentClientMockRecorder) UpdateNamespace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespace", reflect.TypeOf((*MockInfraAgentClient)(nil).UpdateNamespace), varargs...)
}

// UpdateRoute mocks base method.
func (m *MockInfraAgentClient) UpdateRoute(ctx context.Context, in *proto.RouteUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoute", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoute indicates an expected call of UpdateRoute.
func (mr *MockInfraAgentClientMockRecorder) UpdateRoute(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoute", reflect.TypeOf((*MockInfraAgentClient)(nil).UpdateRoute), varargs...)
}

// UpdateServiceAccount mocks base method.
func (m *MockInfraAgentClient) UpdateServiceAccount(ctx context.Context, in *proto.ServiceAccountUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateServiceAccount", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceAccount indicates an expected call of UpdateServiceAccount.
func (mr *MockInfraAgentClientMockRecorder) UpdateServiceAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceAccount", reflect.TypeOf((*MockInfraAgentClient)(nil).UpdateServiceAccount), varargs...)
}

// UpdateVXLANTunnelEndpoint mocks base method.
func (m *MockInfraAgentClient) UpdateVXLANTunnelEndpoint(ctx context.Context, in *proto.VXLANTunnelEndpointUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVXLANTunnelEndpoint", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVXLANTunnelEndpoint indicates an expected call of UpdateVXLANTunnelEndpoint.
func (mr *MockInfraAgentClientMockRecorder) UpdateVXLANTunnelEndpoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVXLANTunnelEndpoint", reflect.TypeOf((*MockInfraAgentClient)(nil).UpdateVXLANTunnelEndpoint), varargs...)
}

// UpdateWireguardEndpoint mocks base method.
func (m *MockInfraAgentClient) UpdateWireguardEndpoint(ctx context.Context, in *proto.WireguardEndpointUpdate, opts ...grpc.CallOption) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWireguardEndpoint", varargs...)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWireguardEndpoint indicates an expected call of UpdateWireguardEndpoint.
func (mr *MockInfraAgentClientMockRecorder) UpdateWireguardEndpoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWireguardEndpoint", reflect.TypeOf((*MockInfraAgentClient)(nil).UpdateWireguardEndpoint), varargs...)
}

// MockInfraAgentServer is a mock of InfraAgentServer interface.
type MockInfraAgentServer struct {
	ctrl     *gomock.Controller
	recorder *MockInfraAgentServerMockRecorder
}

// MockInfraAgentServerMockRecorder is the mock recorder for MockInfraAgentServer.
type MockInfraAgentServerMockRecorder struct {
	mock *MockInfraAgentServer
}

// NewMockInfraAgentServer creates a new mock instance.
func NewMockInfraAgentServer(ctrl *gomock.Controller) *MockInfraAgentServer {
	mock := &MockInfraAgentServer{ctrl: ctrl}
	mock.recorder = &MockInfraAgentServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfraAgentServer) EXPECT() *MockInfraAgentServerMockRecorder {
	return m.recorder
}

// ActivePolicyRemove mocks base method.
func (m *MockInfraAgentServer) ActivePolicyRemove(arg0 context.Context, arg1 *proto.ActivePolicyRemove) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivePolicyRemove", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivePolicyRemove indicates an expected call of ActivePolicyRemove.
func (mr *MockInfraAgentServerMockRecorder) ActivePolicyRemove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivePolicyRemove", reflect.TypeOf((*MockInfraAgentServer)(nil).ActivePolicyRemove), arg0, arg1)
}

// ActivePolicyUpdate mocks base method.
func (m *MockInfraAgentServer) ActivePolicyUpdate(arg0 context.Context, arg1 *proto.ActivePolicyUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivePolicyUpdate", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivePolicyUpdate indicates an expected call of ActivePolicyUpdate.
func (mr *MockInfraAgentServerMockRecorder) ActivePolicyUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivePolicyUpdate", reflect.TypeOf((*MockInfraAgentServer)(nil).ActivePolicyUpdate), arg0, arg1)
}

// AddDelSnatPrefix mocks base method.
func (m *MockInfraAgentServer) AddDelSnatPrefix(arg0 context.Context, arg1 *proto.AddDelSnatPrefixRequest) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDelSnatPrefix", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDelSnatPrefix indicates an expected call of AddDelSnatPrefix.
func (mr *MockInfraAgentServerMockRecorder) AddDelSnatPrefix(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDelSnatPrefix", reflect.TypeOf((*MockInfraAgentServer)(nil).AddDelSnatPrefix), arg0, arg1)
}

// CreateNetwork mocks base method.
func (m *MockInfraAgentServer) CreateNetwork(arg0 context.Context, arg1 *proto.CreateNetworkRequest) (*proto.AddReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", arg0, arg1)
	ret0, _ := ret[0].(*proto.AddReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockInfraAgentServerMockRecorder) CreateNetwork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockInfraAgentServer)(nil).CreateNetwork), arg0, arg1)
}

// DeleteNetwork mocks base method.
func (m *MockInfraAgentServer) DeleteNetwork(arg0 context.Context, arg1 *proto.DeleteNetworkRequest) (*proto.DelReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork", arg0, arg1)
	ret0, _ := ret[0].(*proto.DelReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNetwork indicates an expected call of DeleteNetwork.
func (mr *MockInfraAgentServerMockRecorder) DeleteNetwork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockInfraAgentServer)(nil).DeleteNetwork), arg0, arg1)
}

// InSync mocks base method.
func (m *MockInfraAgentServer) InSync(arg0 context.Context, arg1 *proto.Sync) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InSync", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InSync indicates an expected call of InSync.
func (mr *MockInfraAgentServerMockRecorder) InSync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InSync", reflect.TypeOf((*MockInfraAgentServer)(nil).InSync), arg0, arg1)
}

// IpamPoolRemove mocks base method.
func (m *MockInfraAgentServer) IpamPoolRemove(arg0 context.Context, arg1 *proto.IPAMPoolRemove) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IpamPoolRemove", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpamPoolRemove indicates an expected call of IpamPoolRemove.
func (mr *MockInfraAgentServerMockRecorder) IpamPoolRemove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IpamPoolRemove", reflect.TypeOf((*MockInfraAgentServer)(nil).IpamPoolRemove), arg0, arg1)
}

// IpamPoolUpdate mocks base method.
func (m *MockInfraAgentServer) IpamPoolUpdate(arg0 context.Context, arg1 *proto.IPAMPoolUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IpamPoolUpdate", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpamPoolUpdate indicates an expected call of IpamPoolUpdate.
func (mr *MockInfraAgentServerMockRecorder) IpamPoolUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IpamPoolUpdate", reflect.TypeOf((*MockInfraAgentServer)(nil).IpamPoolUpdate), arg0, arg1)
}

// NatTranslationAdd mocks base method.
func (m *MockInfraAgentServer) NatTranslationAdd(arg0 context.Context, arg1 *proto.NatTranslation) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NatTranslationAdd", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatTranslationAdd indicates an expected call of NatTranslationAdd.
func (mr *MockInfraAgentServerMockRecorder) NatTranslationAdd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NatTranslationAdd", reflect.TypeOf((*MockInfraAgentServer)(nil).NatTranslationAdd), arg0, arg1)
}

// NatTranslationDelete mocks base method.
func (m *MockInfraAgentServer) NatTranslationDelete(arg0 context.Context, arg1 *proto.NatTranslation) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NatTranslationDelete", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatTranslationDelete indicates an expected call of NatTranslationDelete.
func (mr *MockInfraAgentServerMockRecorder) NatTranslationDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NatTranslationDelete", reflect.TypeOf((*MockInfraAgentServer)(nil).NatTranslationDelete), arg0, arg1)
}

// RemoveActiveProfile mocks base method.
func (m *MockInfraAgentServer) RemoveActiveProfile(arg0 context.Context, arg1 *proto.ActiveProfileRemove) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveActiveProfile", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveActiveProfile indicates an expected call of RemoveActiveProfile.
func (mr *MockInfraAgentServerMockRecorder) RemoveActiveProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveActiveProfile", reflect.TypeOf((*MockInfraAgentServer)(nil).RemoveActiveProfile), arg0, arg1)
}

// RemoveHostEndpoint mocks base method.
func (m *MockInfraAgentServer) RemoveHostEndpoint(arg0 context.Context, arg1 *proto.HostEndpointRemove) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHostEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveHostEndpoint indicates an expected call of RemoveHostEndpoint.
func (mr *MockInfraAgentServerMockRecorder) RemoveHostEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHostEndpoint", reflect.TypeOf((*MockInfraAgentServer)(nil).RemoveHostEndpoint), arg0, arg1)
}

// RemoveHostMetaData mocks base method.
func (m *MockInfraAgentServer) RemoveHostMetaData(arg0 context.Context, arg1 *proto.HostMetadataRemove) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHostMetaData", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveHostMetaData indicates an expected call of RemoveHostMetaData.
func (mr *MockInfraAgentServerMockRecorder) RemoveHostMetaData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHostMetaData", reflect.TypeOf((*MockInfraAgentServer)(nil).RemoveHostMetaData), arg0, arg1)
}

// RemoveIPSet mocks base method.
func (m *MockInfraAgentServer) RemoveIPSet(arg0 context.Context, arg1 *proto.IPSetRemove) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveIPSet", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveIPSet indicates an expected call of RemoveIPSet.
func (mr *MockInfraAgentServerMockRecorder) RemoveIPSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveIPSet", reflect.TypeOf((*MockInfraAgentServer)(nil).RemoveIPSet), arg0, arg1)
}

// RemoveLocalEndpoint mocks base method.
func (m *MockInfraAgentServer) RemoveLocalEndpoint(arg0 context.Context, arg1 *proto.WorkloadEndpointRemove) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLocalEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLocalEndpoint indicates an expected call of RemoveLocalEndpoint.
func (mr *MockInfraAgentServerMockRecorder) RemoveLocalEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLocalEndpoint", reflect.TypeOf((*MockInfraAgentServer)(nil).RemoveLocalEndpoint), arg0, arg1)
}

// RemoveNamespace mocks base method.
func (m *MockInfraAgentServer) RemoveNamespace(arg0 context.Context, arg1 *proto.NamespaceRemove) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNamespace", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveNamespace indicates an expected call of RemoveNamespace.
func (mr *MockInfraAgentServerMockRecorder) RemoveNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNamespace", reflect.TypeOf((*MockInfraAgentServer)(nil).RemoveNamespace), arg0, arg1)
}

// RemoveRoute mocks base method.
func (m *MockInfraAgentServer) RemoveRoute(arg0 context.Context, arg1 *proto.RouteRemove) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRoute", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRoute indicates an expected call of RemoveRoute.
func (mr *MockInfraAgentServerMockRecorder) RemoveRoute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoute", reflect.TypeOf((*MockInfraAgentServer)(nil).RemoveRoute), arg0, arg1)
}

// RemoveServiceAccount mocks base method.
func (m *MockInfraAgentServer) RemoveServiceAccount(arg0 context.Context, arg1 *proto.ServiceAccountRemove) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveServiceAccount", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveServiceAccount indicates an expected call of RemoveServiceAccount.
func (mr *MockInfraAgentServerMockRecorder) RemoveServiceAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveServiceAccount", reflect.TypeOf((*MockInfraAgentServer)(nil).RemoveServiceAccount), arg0, arg1)
}

// RemoveVXLANTunnelEndpoint mocks base method.
func (m *MockInfraAgentServer) RemoveVXLANTunnelEndpoint(arg0 context.Context, arg1 *proto.VXLANTunnelEndpointRemove) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVXLANTunnelEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveVXLANTunnelEndpoint indicates an expected call of RemoveVXLANTunnelEndpoint.
func (mr *MockInfraAgentServerMockRecorder) RemoveVXLANTunnelEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVXLANTunnelEndpoint", reflect.TypeOf((*MockInfraAgentServer)(nil).RemoveVXLANTunnelEndpoint), arg0, arg1)
}

// RemoveWireguardEndpoint mocks base method.
func (m *MockInfraAgentServer) RemoveWireguardEndpoint(arg0 context.Context, arg1 *proto.WireguardEndpointRemove) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWireguardEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveWireguardEndpoint indicates an expected call of RemoveWireguardEndpoint.
func (mr *MockInfraAgentServerMockRecorder) RemoveWireguardEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWireguardEndpoint", reflect.TypeOf((*MockInfraAgentServer)(nil).RemoveWireguardEndpoint), arg0, arg1)
}

// SetSnatAddress mocks base method.
func (m *MockInfraAgentServer) SetSnatAddress(arg0 context.Context, arg1 *proto.SetSnatAddressRequest) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSnatAddress", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSnatAddress indicates an expected call of SetSnatAddress.
func (mr *MockInfraAgentServerMockRecorder) SetSnatAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSnatAddress", reflect.TypeOf((*MockInfraAgentServer)(nil).SetSnatAddress), arg0, arg1)
}

// SetupHostInterface mocks base method.
func (m *MockInfraAgentServer) SetupHostInterface(arg0 context.Context, arg1 *proto.SetupHostInterfaceRequest) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupHostInterface", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupHostInterface indicates an expected call of SetupHostInterface.
func (mr *MockInfraAgentServerMockRecorder) SetupHostInterface(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupHostInterface", reflect.TypeOf((*MockInfraAgentServer)(nil).SetupHostInterface), arg0, arg1)
}

// UpdateActiveProfile mocks base method.
func (m *MockInfraAgentServer) UpdateActiveProfile(arg0 context.Context, arg1 *proto.ActiveProfileUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActiveProfile", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActiveProfile indicates an expected call of UpdateActiveProfile.
func (mr *MockInfraAgentServerMockRecorder) UpdateActiveProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActiveProfile", reflect.TypeOf((*MockInfraAgentServer)(nil).UpdateActiveProfile), arg0, arg1)
}

// UpdateGlobalBGPConfig mocks base method.
func (m *MockInfraAgentServer) UpdateGlobalBGPConfig(arg0 context.Context, arg1 *proto.GlobalBGPConfigUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlobalBGPConfig", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlobalBGPConfig indicates an expected call of UpdateGlobalBGPConfig.
func (mr *MockInfraAgentServerMockRecorder) UpdateGlobalBGPConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalBGPConfig", reflect.TypeOf((*MockInfraAgentServer)(nil).UpdateGlobalBGPConfig), arg0, arg1)
}

// UpdateHostEndpoint mocks base method.
func (m *MockInfraAgentServer) UpdateHostEndpoint(arg0 context.Context, arg1 *proto.HostEndpointUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostEndpoint indicates an expected call of UpdateHostEndpoint.
func (mr *MockInfraAgentServerMockRecorder) UpdateHostEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostEndpoint", reflect.TypeOf((*MockInfraAgentServer)(nil).UpdateHostEndpoint), arg0, arg1)
}

// UpdateHostMetaData mocks base method.
func (m *MockInfraAgentServer) UpdateHostMetaData(arg0 context.Context, arg1 *proto.HostMetadataUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostMetaData", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostMetaData indicates an expected call of UpdateHostMetaData.
func (mr *MockInfraAgentServerMockRecorder) UpdateHostMetaData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostMetaData", reflect.TypeOf((*MockInfraAgentServer)(nil).UpdateHostMetaData), arg0, arg1)
}

// UpdateIPSet mocks base method.
func (m *MockInfraAgentServer) UpdateIPSet(arg0 context.Context, arg1 *proto.IPSetUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIPSet", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIPSet indicates an expected call of UpdateIPSet.
func (mr *MockInfraAgentServerMockRecorder) UpdateIPSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIPSet", reflect.TypeOf((*MockInfraAgentServer)(nil).UpdateIPSet), arg0, arg1)
}

// UpdateIPSetDelta mocks base method.
func (m *MockInfraAgentServer) UpdateIPSetDelta(arg0 context.Context, arg1 *proto.IPSetDeltaUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIPSetDelta", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIPSetDelta indicates an expected call of UpdateIPSetDelta.
func (mr *MockInfraAgentServerMockRecorder) UpdateIPSetDelta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIPSetDelta", reflect.TypeOf((*MockInfraAgentServer)(nil).UpdateIPSetDelta), arg0, arg1)
}

// UpdateLocalEndpoint mocks base method.
func (m *MockInfraAgentServer) UpdateLocalEndpoint(arg0 context.Context, arg1 *proto.WorkloadEndpointUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLocalEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLocalEndpoint indicates an expected call of UpdateLocalEndpoint.
func (mr *MockInfraAgentServerMockRecorder) UpdateLocalEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocalEndpoint", reflect.TypeOf((*MockInfraAgentServer)(nil).UpdateLocalEndpoint), arg0, arg1)
}

// UpdateNamespace mocks base method.
func (m *MockInfraAgentServer) UpdateNamespace(arg0 context.Context, arg1 *proto.NamespaceUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespace", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNamespace indicates an expected call of UpdateNamespace.
func (mr *MockInfraAgentServerMockRecorder) UpdateNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespace", reflect.TypeOf((*MockInfraAgentServer)(nil).UpdateNamespace), arg0, arg1)
}

// UpdateRoute mocks base method.
func (m *MockInfraAgentServer) UpdateRoute(arg0 context.Context, arg1 *proto.RouteUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoute", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoute indicates an expected call of UpdateRoute.
func (mr *MockInfraAgentServerMockRecorder) UpdateRoute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoute", reflect.TypeOf((*MockInfraAgentServer)(nil).UpdateRoute), arg0, arg1)
}

// UpdateServiceAccount mocks base method.
func (m *MockInfraAgentServer) UpdateServiceAccount(arg0 context.Context, arg1 *proto.ServiceAccountUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceAccount", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceAccount indicates an expected call of UpdateServiceAccount.
func (mr *MockInfraAgentServerMockRecorder) UpdateServiceAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceAccount", reflect.TypeOf((*MockInfraAgentServer)(nil).UpdateServiceAccount), arg0, arg1)
}

// UpdateVXLANTunnelEndpoint mocks base method.
func (m *MockInfraAgentServer) UpdateVXLANTunnelEndpoint(arg0 context.Context, arg1 *proto.VXLANTunnelEndpointUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVXLANTunnelEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVXLANTunnelEndpoint indicates an expected call of UpdateVXLANTunnelEndpoint.
func (mr *MockInfraAgentServerMockRecorder) UpdateVXLANTunnelEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVXLANTunnelEndpoint", reflect.TypeOf((*MockInfraAgentServer)(nil).UpdateVXLANTunnelEndpoint), arg0, arg1)
}

// UpdateWireguardEndpoint mocks base method.
func (m *MockInfraAgentServer) UpdateWireguardEndpoint(arg0 context.Context, arg1 *proto.WireguardEndpointUpdate) (*proto.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWireguardEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWireguardEndpoint indicates an expected call of UpdateWireguardEndpoint.
func (mr *MockInfraAgentServerMockRecorder) UpdateWireguardEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWireguardEndpoint", reflect.TypeOf((*MockInfraAgentServer)(nil).UpdateWireguardEndpoint), arg0, arg1)
}
